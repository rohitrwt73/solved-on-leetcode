class Solution {
    public int romanToInt(String s) {
        Map<Character,Integer>map = new HashMap();
        map.put('I',1);
        map.put('X',10);
        map.put('L',50);
        map.put('C',100);
        map.put('D',500);
        map.put('M',1000);
        int result =0;
        for(int i =0; i< s.length(); i++){
            if(i>0 && map.get(s.charAt(i))> map.get(s.charAt(i-1))){
                result+=  map.get(s.charAt(i))- 2* map.get(s.charAt(i-1));
            }else{
                result+= map.get(s.charAt(i));
            }
        }
       return result; 
    }
}
but this contain high time complexity...alternative method is:
class Solution {
	public int romanToInt(String s) {
		int result = 0;
		char[] sArray = s.toCharArray(); // turn str to char array

		for (int i = 0; i <= sArray.length - 1; i += 1) { // iterate through each char
			if (sArray[i] == 'M') {
				result += 1000;
			}
			else if (sArray[i] == 'D') {
				result += 500;
			}
			else if (sArray[i] == 'C') {
				if (i == sArray.length - 1) {
					result += 100;
				}
				else if (sArray[i + 1] == 'D') { // check char after
					result += 400;
					i += 1; // skip the char after
				}
				else if (sArray[i + 1] == 'M') { // same as above
					result += 900;
					i += 1;
				}
				else {
					result += 100;
				}
			}
			else if (sArray[i] == 'L') {
				result += 50;
			}
			else if (sArray[i] == 'X') {
				if (i == sArray.length - 1) {
					result += 10;
				}
				else if (sArray[i + 1] == 'L') {
					result += 40;
					i += 1;
				}
				else if (sArray[i + 1] == 'C') {
					result += 90;
					i += 1;
				}
				else {
					result += 10;
				}
			}
			else if (sArray[i] == 'V') {
				result += 5;
			}
			else {
				if (i == sArray.length - 1) {
					result += 1;
				}
				else if (sArray[i + 1] == 'V') {
					result += 4;
					i += 1;
				}
				else if (sArray[i + 1] == 'X') {
					result += 9;
					i += 1;
				}
				else {
					result += 1;
				}
			}
		}
		return result;
	}
}
